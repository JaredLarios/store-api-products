# Simple workflow for deploying static content to GitHub Pages
name: CI/CD Pull Requests Pipeline CSE 270

on:
  pull_request:
    branches: ["main", "staging"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    environment:
      name: Staging
    steps:
    - name: Checkout the latest code
      uses: actions/checkout@v4.1.2
    - name: Setup Node.js 22
      uses: actions/setup-node@v4
      with:
        node-version: '22.14'
        cache: "npm"
    - name: Install dependencies
      run: |
        npm install -g yarn
        yarn install
    
    - name: Lint with Eslint
      run: |
        yarn run lint

    - name: Run tests
      run: |
        yarn run test

    
  analyze:
    needs: build
    name: Analyze
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ["javascript"]
          # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby', 'swift' ]
          # Use only 'java' to analyze code written in Java, Kotlin or both
          # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both
          # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.2

      # Initializes the CodeQL tools for scanning.
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          # If you wish to specify custom queries, you can do so here or in a config file.
          # By default, queries listed here will override any specified in a config file.
          # Prefix the list here with "+" to use these queries and those in the config file.

          # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
          # queries: security-extended,security-and-quality

    # Autobuild attempts to build any compiled languages (C/C++, C#, Go, Java, or Swift).
    # If this step fails, then you should remove it and run the build manually (see below)
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines.
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    # - run: |
    #     echo "Run, Build Application using script"
    #     ./location_of_script_within_repo/buildscript.sh

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"
        # Single deploy job since we're just deploying

  deploy:
    needs: analyze
    environment:
      name: Production

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: npm run build

      #- name: Install Vercel CLI
      #  run: npm install -g vercel

      #- name: Deploy to Vercel
      #  env:
      #    VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      #  run: |
      #    vercel --prod --confirm --token $VERCEL_TOKEN

